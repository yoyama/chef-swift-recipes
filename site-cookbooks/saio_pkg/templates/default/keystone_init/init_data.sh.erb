#!/usr/bin/env bash


# Copyright 2013 OpenStack LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

# Sample initial data for Keystone using python-keystoneclient
#
# This script is based on the original DevStack keystone_data.sh script.
#
# It demonstrates how to bootstrap Keystone with an administrative user
# using the SERVICE_TOKEN and SERVICE_ENDPOINT environment variables
# and the administrative API.  It will get the admin_token (SERVICE_TOKEN)
# and admin_port from keystone.conf if available.
#
# Disable creation of endpoints by setting DISABLE_ENDPOINTS environment variable.
# Use this with the Catalog Templated backend.
#
#
# Tenant               User       Roles
# -------------------------------------------------------
# admin                admin      admin
# service              swift      admin
# service              ceilometer admin,ResellerAdmin


CONTROLLER_PUBLIC_ADDRESS=<%=@ks_auth_host_external%>
CONTROLLER_ADMIN_ADDRESS=<%=@ks_auth_host_external%>
CONTROLLER_INTERNAL_ADDRESS=<%=@ks_auth_host_external%>
ADMIN_USER_PASSWORD=<%=@ks_admin_user_pass%>
SERVICE_USER_PASSWORD=<%=@ks_service_user_pass%>
SWIFT_ADDRESS=<%=@swift_proxy_host%>
CEILOMETER_ADDRESS=<%=@cm_api_host%>


CONTROLLER_PUBLIC_ADDRESS=${CONTROLLER_PUBLIC_ADDRESS:-localhost}
CONTROLLER_ADMIN_ADDRESS=${CONTROLLER_ADMIN_ADDRESS:-localhost}
CONTROLLER_INTERNAL_ADDRESS=${CONTROLLER_INTERNAL_ADDRESS:-localhost}

KEYSTONE_CONF=${KEYSTONE_CONF:-/etc/keystone/keystone.conf}

# Extract some info from Keystone's configuration file
if [[ -r "$KEYSTONE_CONF" ]]; then
    CONFIG_SERVICE_TOKEN=$(sed 's/[[:space:]]//g' $KEYSTONE_CONF | grep ^admin_token= | cut -d'=' -f2)
    CONFIG_ADMIN_PORT=$(sed 's/[[:space:]]//g' $KEYSTONE_CONF | grep ^admin_port= | cut -d'=' -f2)
fi

export SERVICE_TOKEN=${SERVICE_TOKEN:-$CONFIG_SERVICE_TOKEN}
if [[ -z "$SERVICE_TOKEN" ]]; then
    echo "No service token found."
    echo "Set SERVICE_TOKEN manually from keystone.conf admin_token."
    exit 1
fi

export SERVICE_ENDPOINT=${SERVICE_ENDPOINT:-http://$CONTROLLER_PUBLIC_ADDRESS:${CONFIG_ADMIN_PORT:-35357}/v2.0}


function get_id () {
    echo `"$@" | grep ' id ' | awk '{print $4}'`
}

#
# Default tenant
#
ADMIN_TENANT=$(get_id keystone tenant-create --name=admin \
                                            --description "Admin Tenant")

ADMIN_USER=$(get_id keystone user-create --name=admin \
                                         --pass=$ADMIN_USER_PASSWORD)

ADMIN_ROLE=$(get_id keystone role-create --name=admin)
MEMBER_ROLE=$(get_id keystone role-create --name=Member)
RESELLER_ADMIN_ROLE=$(get_id keystone role-create --name=ResellerAdmin)

keystone user-role-add --user-id $ADMIN_USER \
                       --role-id $ADMIN_ROLE \
                       --tenant-id $ADMIN_TENANT

#
# Service tenant
#
SERVICE_TENANT=$(get_id keystone tenant-create --name=service \
                                               --description "Service Tenant")

#
# Swift user
#
SWIFT_USER=$(get_id keystone user-create --name=swift \
                                         --pass=$SERVICE_USER_PASSWORD \
                                         --tenant-id $SERVICE_TENANT)

keystone user-role-add --user-id $SWIFT_USER \
                       --role-id $ADMIN_ROLE \
                       --tenant-id $SERVICE_TENANT

#
# Ceilometer user
#
CEILOMETER_USER=$(get_id keystone user-create --name=ceilometer \
                                         --pass=$SERVICE_USER_PASSWORD \
                                         --tenant-id $SERVICE_TENANT)

keystone user-role-add --user-id $CEILOMETER_USER \
                       --role-id $ADMIN_ROLE \
                       --tenant-id $SERVICE_TENANT

keystone user-role-add --user-id $CEILOMETER_USER \
                       --role-id $RESELLER_ADMIN_ROLE \
                       --tenant-id $SERVICE_TENANT

#
# Keystone service
#
KEYSTONE_SERVICE=$(get_id \
keystone service-create --name=keystone \
                        --type=identity \
                        --description="Keystone Identity Service")
if [[ -z "$DISABLE_ENDPOINTS" ]]; then
    keystone endpoint-create --region RegionOne --service-id $KEYSTONE_SERVICE \
        --publicurl "https://$CONTROLLER_PUBLIC_ADDRESS/v2.0" \
        --adminurl "http://$CONTROLLER_ADMIN_ADDRESS:\$(admin_port)s/v2.0" \
        --internalurl "http://$CONTROLLER_INTERNAL_ADDRESS:\$(public_port)s/v2.0"
fi


#
# Swift service
#
SWIFT_SERVICE=$(get_id \
keystone service-create --name=swift \
                        --type="object-store" \
                        --description="Swift Service")
if [[ -z "$DISABLE_ENDPOINTS" ]]; then
    keystone endpoint-create --region RegionOne --service-id $SWIFT_SERVICE \
        --publicurl   "http://$SWIFT_ADDRESS:8080/v1/AUTH_\$(tenant_id)s" \
        --adminurl    "http://$SWIFT_ADDRESS:8080/v1" \
        --internalurl "http://$SWIFT_ADDRESS:8080/v1/AUTH_\$(tenant_id)s"
fi


#
# Ceilometer service
#
CEILOMETER_SERVICE=$(get_id \
keystone service-create --name=ceilometer \
                        --type="metering" \
                        --description="Ceilometer Service")
if [[ -z "$DISABLE_ENDPOINTS" ]]; then
    keystone endpoint-create --region RegionOne --service-id $CEILOMETER_SERVICE \
        --publicurl   "http://$CEILOMETER_ADDRESS:8777/" \
        --adminurl    "http://$CEILOMETER_ADDRESS:8777/" \
        --internalurl "http://$CEILOMETER_ADDRESS:8777/"
fi
